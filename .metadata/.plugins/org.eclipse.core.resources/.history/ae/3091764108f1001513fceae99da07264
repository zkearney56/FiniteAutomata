package map;

import java.util.Arrays;

public class HashMap<K,V> implements Map{

	private Entry<K,V>[] table;
	private int capacity = 10;
	private int size = 0;
	
	public HashMap(){
		table = new Entry[capacity];
		size = 0;
	}
	@Override
	public void clear() {
		table = new Entry[capacity];
		size = 0;
	}

	@Override
	public boolean containsKey(Object key) {
		int hash = hash(key);
        if(table[hash] == null){
         return false;
        }else{
         Entry<K,V> temp = table[hash];
         while(temp!= null){
             if(temp.key.equals(key))
                 return true;
             temp = temp.next; //return value corresponding to key.
         }         
         return false;   //returns null if key is not found.
        }
	}

	@Override
	public boolean containsValue(Object value) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public Object get(Object key) {
		int hash = hash(key);
        if(table[hash] == null){
         return null;
        }else{
         Entry<K,V> temp = table[hash];
         while(temp!= null){
             if(temp.key.equals(key))
                 return temp.value;
             temp = temp.next; //return value corresponding to key.
         }         
         return null;   //returns null if key is not found.
        }
	}

	@Override
	public boolean isEmpty() {
		if(size == 0){
			return false;
		}
		else{
			return true;
		}
	}

	public void put(Object key, Object value) {
		if(key==null)
	           return;    //does not allow to store null.
	      
	       //calculate hash of key.
	       int hash=hash(key);
	       //create new entry.
	       Entry<K,V> newEntry = new Entry<K,V>(key, value, null);
	      
	       //if table location does not contain any entry, store entry there.
	        if(table[hash] == null){
	         table[hash] = newEntry;
	         size++;
	        }else{
	           Entry<K,V> previous = null;
	           Entry<K,V> current = table[hash];
	           
	           while(current != null){ //we have reached last entry of bucket.
	           if(current.key.equals(key)){           
	               if(previous==null){  //node has to be insert on first of bucket.
	                     newEntry.next=current.next;
	                     table[hash]=newEntry;
	                     return;
	               }
	               else{
	                   newEntry.next=current.next;
	                   previous.next=newEntry;
	                   return;
	               }
	           }
	           previous=current;
	             current = current.next;
	         }
	         previous.next = newEntry;
	         size++;
	        }
	}

	@Override
	public Object remove(Object key) {
	       
	       int hash=hash(key);
	              
	      if(table[hash] == null){
	            return false;
	      }else{
	        Entry<K,V> previous = null;
	        Entry<K,V> current = table[hash];
	        
	        while(current != null){ //we have reached last entry node of bucket.
	           if(current.key.equals(key)){               
	               if(previous==null){  //delete first entry node.
	                     table[hash]=table[hash].next;
	                     size--;
	                     return key;
	               }
	               else{
	                     previous.next=current.next;
	                     size--;
	                      return key;
	               }
	           }
	           previous=current;
	             current = current.next;
	          }
	        return false;
	      }
	}

	@Override
	public int size() {
		return size;
	}
	
	private void increaseCapacity(){
		int newCapacity = table.length * 2;
		table = Arrays.copyOf(table, newCapacity);
	}
	
    private int hash(Object key){
        return Math.abs(key.hashCode()) % capacity;
    }
 
	
	static class Entry<K,V>{
		Object key;
		Object value;
		Entry<K,V> next;
		
		public Entry(Object key, Object value, Entry<K,V> next){
			this.key = key;
			this.value = value;
			this.next = next;
		}
	}

}
